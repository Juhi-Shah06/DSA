Number Hashing
Using arrays
Hashing means mapping the frequency of the elements that have occurred in the fixed length arrays. 
For example if my array = 1,2,3,2,1,4,3,5 and i want to know how many times each number has occurred, then i can simply use hashing.
In this the index number represents the element. Initially all of them are initialized to 0. Then when an element is read that index value is incremented by 1, which means that this particular number has been read once. Likewise happens for all the elements.
We have to provide the number of elements that we are looking for and those elements. This is called a query. If we give the query for an element that is not present in the array, then it gives 0 as output.
For example = 1,2,3,2,1,4,3,5
Query input: 6
1,2,3,4,5,6
The output of this will be: 2,2,2,1,1,0

Character Hashing
We can perform hashing even for characters using arrays.
Theorotically we can imagine each index number as an alphabet like 0 = a, 1 = b, 2 = c, and so on. But this cannot work programmatically.
Instead we can use ASCII values. 'a' = 97 ..... 'z' = 122  'A' = 65 ..... 'Z' = 90
a - a = 0 , b - a = 1, c - a = 2.....
So if we do ch - 'a', we will get the corresponding index.
We have 256 characters. Hence here we don't even need to subtract.
If we want 'A' then we will directly go to 97th index in the array.

If you declare array globally, it can take 10^7 integers.
Inside the function, it will allow 10^6 integers.

Hash Map 
STL
Key value pair is stored.
Key is the element and value is the frequency.


Division method
Lets say we can make array of size 10 only.
Example arr[5] = {2,5,16,28,139}
How it will be stored: arr[i] % 10 
Thus, 2%10 = 2 -->2
5%10 = 5 -->5
16%10 = 6 -->6
28%10 = 8 -->8
139%10 = 9 -->9
This how it will be stored in array.

If we multiple numbers for a particular index, then Linear chaining is performed.
Like if we have 18, 28, 28, 38, 48, 18
Then we on the 8th position we have = 18->18->28->28->38->48    (It is chained in a sorted order)

Collision
Consider that the array has all the numbers ending with 5 only. Then all the elements will be stored at 5th position in the array. 
Rest of the memory will be unused. This is called collision.Then finding out an element and it's occurrence will be very time consuming.
In the hash map, all the keys will be 5. This is when there will be worst case time complexity O(N).